import { Request, Response, NextFunction } from 'express';
import OpenAI from 'openai';
import { Chat } from '../models/Chat';
import { User } from '../models/User';
import { AppError } from '../middleware/errorHandler';
import { logger } from '../utils/logger';
import { Schedule } from '../models/Schedule';
import { BusRoute } from '../models/BusRoute';
import { Event } from '../models/Event';
import { catchAsync } from '../utils/catchAsync';

interface AuthenticatedRequest extends Request {
  user?: {
    id: string;
    role: string;
    degree?: string;
  };
}

// Language translations
interface TranslationKeys {
  greeting_response: string;
  mood_tired: string;
  mood_hungry: string;
  mood_bored: string;
  mood_stressed: string;
  mood_sad: string;
  mood_happy: string;
  location_help: string;
  student_only: string;
  degree_not_set: string;
  no_schedules_today: string;
  no_more_classes: string;
  remaining_classes: string;
  no_bus_routes: string;
  available_routes: string;
  no_events: string;
  upcoming_events: string;
  error_fetching_schedule: string;
  error_fetching_bus: string;
  error_fetching_events: string;
  fallback_response: string;
}

const translations: Record<string, TranslationKeys> = {
  en: {
    greeting_response: "Hello! üëã Welcome to NovaCore University! I'm Nexora, your campus assistant. How can I help you today? I can assist with finding locations, checking class schedules, bus routes, and campus events.",
    mood_tired: "I understand you're feeling tired! üò¥ Maybe I can help you find a quiet place to rest on campus, or check if there are any upcoming breaks in your schedule. Would you like me to help you find the library for a peaceful study session, or check your class schedule to see when you have free time?",
    mood_hungry: "Feeling hungry? üçï I can help you find the best places to eat on campus! The cafeteria is usually a great option, or I can tell you about other food spots nearby. Would you like me to show you where the cafeteria is located, or check if there are any food-related events happening today?",
    mood_bored: "Bored? üòä Let me help you find something interesting to do! I can check what events are happening on campus today, show you around different facilities, or help you explore new areas. Would you like to see upcoming events, or shall I give you a virtual tour of some interesting campus locations?",
    mood_stressed: "I'm sorry you're feeling stressed! üòå Let me help you find some ways to relax. I can show you quiet study areas, check if there are any wellness events happening, or help you find a peaceful spot on campus. Would you like me to locate the library for some quiet time, or check for any stress-relief activities?",
    mood_sad: "I'm sorry you're feeling down. üòî Let me try to help cheer you up! I can show you some beautiful spots on campus, check for any fun events happening, or help you find a nice place to take a walk. Would you like to explore some campus locations, or shall I check for any upcoming social events?",
    mood_happy: "That's wonderful! üòä I'm glad you're in a good mood! How can I help make your day even better? I can assist with finding locations, checking schedules, or showing you around campus. What would you like to do?",
    location_help: "I can help you find locations on campus! Try asking for:\n\n‚Ä¢ IT Faculty\n‚Ä¢ Engineering Faculty\n‚Ä¢ Architecture Faculty\n‚Ä¢ Library\n‚Ä¢ Cafeteria\n‚Ä¢ Main Building\n\nJust ask 'Where is [location name]?' and I'll show you on the map!",
    student_only: "I can only show class schedules for students. Please contact the admin for more information.",
    degree_not_set: "Your degree information is not set. Please contact the admin to set your degree.",
    no_schedules_today: "I don't see any class schedules for {degree} degree today.",
    no_more_classes: "You don't have any more {degree} classes scheduled for today.",
    remaining_classes: "Here are your remaining {degree} classes for today:\n\n",
    no_bus_routes: "I don't see any bus routes in the system yet. Please ask an admin to add some routes.",
    available_routes: "Here are the available bus routes:\n\n",
    no_events: "I don't see any upcoming events in the system yet. Please ask an admin to add some events.",
    upcoming_events: "Here are the upcoming events:\n\n",
    error_fetching_schedule: "Sorry, I encountered an error while fetching your schedule. Please try again.",
    error_fetching_bus: "Sorry, I encountered an error while fetching bus routes. Please try again.",
    error_fetching_events: "Sorry, I encountered an error while fetching events. Please try again.",
    fallback_response: "I understand you're asking about something. I can help you with class schedules, bus routes, campus events, and finding locations. What would you like to know?"
  },
  si: {
    greeting_response: "‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä! üëã NovaCore ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∂Ω‡∂∫‡∂ß ‡∑É‡∑è‡∂Ø‡∂ª‡∂∫‡∑ô‡∂±‡∑ä ‡∂¥‡∑í‡∑Ö‡∑í‡∂ú‡∂±‡∑í‡∂∏‡∑î! ‡∂∏‡∂∏ Nexora, ‡∂î‡∂∂‡∑ö ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∂Ω ‡∑É‡∑Ñ‡∑è‡∂∫‡∂ö‡∂∫‡∑è. ‡∂Ö‡∂Ø ‡∂∏‡∂ß ‡∂î‡∂∂‡∂ß ‡∂ö‡∑ô‡∑É‡∑ö ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂Ø? ‡∑É‡∑ä‡∂Æ‡∑è‡∂± ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏, ‡∂¥‡∂±‡∑ä‡∂≠‡∑í ‡∂ö‡∑è‡∂Ω‡∑É‡∂ß‡∑Ñ‡∂±‡∑ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏, ‡∂∂‡∑É‡∑ä ‡∂∏‡∑è‡∂ª‡∑ä‡∂ú ‡∑É‡∑Ñ ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∂Ω ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂ú‡∑ê‡∂± ‡∂∏‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫.",
    mood_tired: "‡∂î‡∂∂ ‡∂Ö‡∑Ä‡∑î‡∂ª‡∑î‡∂Ø‡∑î ‡∑Ä‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂± ‡∂∂‡∑Ä ‡∂∏‡∂ß ‡∂≠‡∑ö‡∂ª‡∑ô‡∂±‡∑Ä‡∑è! üò¥ ‡∂∏‡∂ß ‡∂î‡∂∂‡∂ß ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∂Ω‡∂∫‡∑ö ‡∑É‡∂±‡∑ä‡∑É‡∑î‡∂±‡∑ä ‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∂∫‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑ù ‡∂î‡∂∂‡∑ö ‡∂ö‡∑è‡∂Ω‡∑É‡∂ß‡∑Ñ‡∂±‡∑ö ‡∂â‡∂Ø‡∑í‡∂ª‡∑í ‡∑Ä‡∑í‡∑Ä‡∑ö‡∂ö ‡∂ö‡∑è‡∂Ω‡∂∫‡∂±‡∑ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫. ‡∂¥‡∑î‡∑É‡∑ä‡∂≠‡∂ö‡∑è‡∂Ω‡∂∫ ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑ù ‡∂±‡∑í‡∂Ø‡∑Ñ‡∑É‡∑ä ‡∂ö‡∑è‡∂Ω‡∂∫ ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∂Ø?",
    mood_hungry: "‡∂∂‡∂©‡∂ú‡∑í‡∂±‡∑í‡∂Ø? üçï ‡∂∏‡∂ß ‡∂î‡∂∂‡∂ß ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∂Ω‡∂∫‡∑ö ‡∑Ñ‡∑ú‡∂≥‡∂∏ ‡∂ö‡∑ë‡∂∏ ‡∑É‡∑ä‡∂Æ‡∑è‡∂± ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∑Ö ‡∑Ñ‡∑ê‡∂ö‡∑í‡∂∫! ‡∂ö‡∑ë‡∂∏‡∑ù‡∂ß‡∑î‡∑Ä ‡∑É‡∑è‡∂∏‡∑è‡∂±‡∑ä‚Äç‡∂∫‡∂∫‡∑ô‡∂±‡∑ä ‡∑Ñ‡∑ú‡∂≥ ‡∑Ä‡∑í‡∂ö‡∂Ω‡∑ä‡∂¥‡∂∫‡∂ö‡∑ä, ‡∑Ñ‡∑ù ‡∂Ö‡∑Ä‡∂ß ‡∂á‡∂≠‡∑í ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä ‡∂ö‡∑ë‡∂∏ ‡∑É‡∑ä‡∂Æ‡∑è‡∂± ‡∂ú‡∑ê‡∂± ‡∂ö‡∑í‡∂∫‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä. ‡∂ö‡∑ë‡∂∏‡∑ù‡∂ß‡∑î‡∑Ä ‡∂ö‡∑ú‡∑Ñ‡∑ô‡∂Ø ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∑è‡∂Ø ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂±‡∂Ø, ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∂Ö‡∂Ø ‡∂ö‡∑ë‡∂∏ ‡∂ú‡∑ê‡∂± ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∑è‡∂Ø ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∂Ø?",
    mood_bored: "‡∂∂‡∑ú‡∂ª‡∑î‡∂Ø? üòä ‡∂ª‡∑É‡∑Ä‡∂≠‡∑ä ‡∂Ø‡∑ô‡∂∫‡∂ö‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±! ‡∂Ö‡∂Ø ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∂Ω‡∂∫‡∑ö ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∂± ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±, ‡∑Ä‡∑í‡∑Ä‡∑í‡∂∞ ‡∂¥‡∑Ñ‡∑É‡∑î‡∂ö‡∂∏‡∑ä ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂±, ‡∑Ñ‡∑ù ‡∂±‡∑Ä ‡∂¥‡∑ä‚Äç‡∂ª‡∂Ø‡∑ö‡∑Å ‡∂ú‡∑Ä‡∑ö‡∑Ç‡∂´‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä. ‡∂â‡∂Ø‡∑í‡∂ª‡∑í ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±‡∂Ø, ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∑É‡∑í‡∂≠‡∑ä‡∂ú‡∂±‡∑ä‡∂±‡∑è ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∂Ω ‡∑É‡∑ä‡∂Æ‡∑è‡∂± ‡∑Ä‡∂Ω ‡∂≠‡∑è‡∂ª‡∂ö‡∑è ‡∂†‡∑è‡∂ª‡∑í‡∂ö‡∑è‡∑Ä‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±‡∂Ø?",
    mood_stressed: "‡∂î‡∂∂ ‡∂Ü‡∂≠‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑ä ‡∑É‡∑í‡∂ß‡∑í‡∂± ‡∂∂‡∑Ä ‡∂ö‡∂±‡∂ú‡∑è‡∂ß‡∑î‡∑Ä‡∂∫‡∑í! üòå ‡∑É‡∂±‡∑ä‡∑É‡∑î‡∂±‡∑ä ‡∑Ä‡∑ì‡∂∏‡∂ß ‡∂ö‡∑ä‚Äç‡∂ª‡∂∏ ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±. ‡∑É‡∂±‡∑ä‡∑É‡∑î‡∂±‡∑ä ‡∂Ö‡∂∞‡∑ä‚Äç‡∂∫‡∂∫‡∂± ‡∂¥‡∑ä‚Äç‡∂ª‡∂Ø‡∑ö‡∑Å ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂±, ‡∑É‡∑û‡∂õ‡∑ä‚Äç‡∂∫ ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂≠‡∑í‡∂∫‡∑ô‡∂±‡∑Ä‡∑è‡∂Ø ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±, ‡∑Ñ‡∑ù ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∂Ω‡∂∫‡∑ö ‡∑É‡∂±‡∑ä‡∑É‡∑î‡∂±‡∑ä ‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∂∫‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä. ‡∑É‡∂±‡∑ä‡∑É‡∑î‡∂±‡∑ä ‡∂ö‡∑è‡∂Ω‡∂∫‡∂ö‡∑ä ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∑î‡∑É‡∑ä‡∂≠‡∂ö‡∑è‡∂Ω‡∂∫ ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß‡∂Ø, ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∂Ü‡∂≠‡∂≠‡∑í ‡∂Ω‡∑í‡∑Ñ‡∑í‡∂Ω‡∑ä ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö ‡∂ö‡∑ä‚Äç‡∂ª‡∑í‡∂∫‡∑è‡∂ö‡∑è‡∂ª‡∂ö‡∂∏‡∑ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∂Ø?",
    mood_sad: "‡∂î‡∂∂ ‡∂Ø‡∑î‡∂ö‡∑ä ‡∑Ä‡∑ì ‡∑É‡∑í‡∂ß‡∑í‡∂± ‡∂∂‡∑Ä ‡∂ö‡∂±‡∂ú‡∑è‡∂ß‡∑î‡∑Ä‡∂∫‡∑í. üòî ‡∑É‡∂≠‡∑î‡∂ß‡∑î ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂±! ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∂Ω‡∂∫‡∑ö ‡∑É‡∑î‡∂±‡∑ä‡∂Ø‡∂ª ‡∑É‡∑ä‡∂Æ‡∑è‡∂± ‡∂¥‡∑ô‡∂±‡∑ä‡∑Ä‡∂±‡∑ä‡∂±, ‡∑Ä‡∑í‡∂±‡∑ù‡∂Ø‡∂¢‡∂±‡∂ö ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±, ‡∑Ñ‡∑ù ‡∂á‡∑Ä‡∑í‡∂Ø‡∑ì‡∂∏‡∂ß ‡∑Ñ‡∑ú‡∂≥ ‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∂∫‡∂ö‡∑ä ‡∑É‡∑ú‡∂∫‡∑è‡∂ú‡∑ê‡∂±‡∑ì‡∂∏‡∂ß ‡∂ã‡∂Ø‡∑Ä‡∑ä ‡∂ö‡∂ª‡∂±‡∑ä‡∂± ‡∂¥‡∑î‡∑Ö‡∑î‡∑Ä‡∂±‡∑ä. ‡∑Ä‡∑í‡∑Å‡∑ä‡∑Ä‡∑Ä‡∑í‡∂Ø‡∑ä‚Äç‡∂∫‡∑è‡∂Ω ‡∑É‡∑ä‡∂Æ‡∑è‡∂± ‡∂ú‡∑Ä‡∑ö‡∑Ç‡∂´‡∂∫ ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∂Ø, ‡∂±‡∑ê‡∂≠‡∑ä‡∂±‡∂∏‡∑ä ‡∂â‡∂Ø‡∑í‡∂ª‡∑í ‡∑É‡∂∏‡∑è‡∂¢ ‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏‡∑ä ‡∂¥‡∂ª‡∑ì‡∂ö‡∑ä‡∑Ç‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂±‡∂Ø?",
    mood_happy: "‡∂í‡∂ö ‡∑Ñ‡∑ú‡∂≥‡∂∫‡∑í! üòä ‡∂î‡∂∂ ‡∑Ñ‡∑ú‡∂≥ ‡ÆÆ‡Æ©‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Æø‡Æ≤‡Øç ‡Æá‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æï‡Æø‡Æ¥‡Øç‡Æö‡Øç‡Æö‡Æø! ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ®‡Ææ‡Æ≥‡Øà ‡Æá‡Æ©‡Øç‡Æ©‡ØÅ‡ÆÆ‡Øç ‡Æö‡Æø‡Æ±‡Æ™‡Øç‡Æ™‡Ææ‡Æï‡Øç‡Æï ‡Æ®‡Ææ‡Æ©‡Øç ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç? ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡ØÅ, ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡Æï‡Æ≥‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æ§‡ØÅ, ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æµ‡Æ≥‡Ææ‡Æï‡Æ§‡Øç‡Æ§‡Øà‡Æö‡Øç ‡Æö‡ØÅ‡Æ±‡Øç‡Æ±‡Æø‡Æï‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æµ‡Æ§‡ØÅ ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ©‡Øç‡Æ© ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?",
    location_help: "‡Æµ‡Æ≥‡Ææ‡Æï‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç! ‡Æá‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç:\n\n‚Ä¢ IT ‡Æ™‡ØÄ‡Æü‡ÆÆ‡Øç\n‚Ä¢ ‡Æ™‡Øä‡Æ±‡Æø‡ÆØ‡Æø‡ÆØ‡Æ≤‡Øç ‡Æ™‡ØÄ‡Æü‡ÆÆ‡Øç\n‚Ä¢ ‡Æï‡Æü‡Øç‡Æü‡Æø‡Æü‡Æï‡Øç‡Æï‡Æ≤‡Øà ‡Æ™‡ØÄ‡Æü‡ÆÆ‡Øç\n‚Ä¢ ‡Æ®‡ØÇ‡Æ≤‡Æï‡ÆÆ‡Øç\n‚Ä¢ ‡Æâ‡Æ£‡Æµ‡Æï‡ÆÆ‡Øç\n‚Ä¢ ‡ÆÆ‡ØÅ‡Æ§‡Æ©‡Øç‡ÆÆ‡Øà ‡Æï‡Æü‡Øç‡Æü‡Æø‡Æü‡ÆÆ‡Øç\n\n'[‡Æá‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç] ‡Æé‡Æô‡Øç‡Æï‡Øá?' ‡Æé‡Æ©‡Øç‡Æ±‡ØÅ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æ®‡Ææ‡Æ©‡Øç ‡ÆÖ‡Æ§‡Øà ‡Æµ‡Æ∞‡Øà‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æµ‡Øá‡Æ©‡Øç!",
    student_only: "‡ÆÆ‡Ææ‡Æ£‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øá ‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡ÆÆ‡Øá‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø‡ÆØ‡Øà ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡Æµ‡ØÅ‡ÆÆ‡Øç.",
    degree_not_set: "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æü‡Øç‡Æü‡Æ™‡Øç‡Æ™‡Æü‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡ÆÖ‡ÆÆ‡Øà‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æü‡Øç‡Æü‡Æ™‡Øç‡Æ™‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Øà ‡ÆÖ‡ÆÆ‡Øà‡Æï‡Øç‡Æï ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø‡ÆØ‡Øà ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡Æµ‡ØÅ‡ÆÆ‡Øç.",
    no_schedules_today: "‡Æá‡Æ©‡Øç‡Æ±‡ØÅ {degree} ‡Æ™‡Æü‡Øç‡Æü‡Æ™‡Øç‡Æ™‡Æü‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà.",
    no_more_classes: "‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ {degree} ‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà.",
    remaining_classes: "‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡ØÄ‡Æ§‡ÆÆ‡ØÅ‡Æ≥‡Øç‡Æ≥ {degree} ‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‡Æá‡Æ§‡Øã:\n\n",
    no_bus_routes: "‡Æö‡Æø‡Æ∏‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æ™‡Øá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æµ‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø‡ÆØ‡Æø‡Æü‡ÆÆ‡Øç ‡Æµ‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Ææ‡Æ±‡ØÅ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.",
    available_routes: "‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡Æï‡Øç‡Æï‡ØÇ‡Æü‡Æø‡ÆØ ‡Æ™‡Øá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æµ‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æá‡Æ§‡Øã:\n\n",
    no_events: "‡Æö‡Æø‡Æ∏‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æµ‡Æ∞‡Æµ‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø‡ÆØ‡Æø‡Æü‡ÆÆ‡Øç ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Ææ‡Æ±‡ØÅ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.",
    upcoming_events: "‡Æµ‡Æ∞‡Æµ‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡Æá‡Æ§‡Øã:\n\n",
    error_fetching_schedule: "‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡ÆØ‡Øà ‡Æ™‡ØÜ‡Æ±‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æ™‡Æø‡Æ¥‡Øà ‡Æè‡Æ±‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.",
    error_fetching_bus: "‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æ™‡Øá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æµ‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æ™‡ØÜ‡Æ±‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æ™‡Æø‡Æ¥‡Øà ‡Æè‡Æ±‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.",
    error_fetching_events: "‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà ‡Æ™‡ØÜ‡Æ±‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æ™‡Æø‡Æ¥‡Øà ‡Æè‡Æ±‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.",
    fallback_response: "‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æè‡Æ§‡Ææ‡Æµ‡Æ§‡ØÅ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø ‡Æï‡Øá‡Æü‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Øà ‡Æ®‡Ææ‡Æ©‡Øç ‡Æ™‡ØÅ‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Øä‡Æ≥‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡Æï‡Æ≥‡Øç, ‡Æ™‡Øá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æµ‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æµ‡Æ≥‡Ææ‡Æï ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ©‡Øç‡Æ© ‡Æ§‡ØÜ‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?"
  },
  ta: {
    greeting_response: "‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç! üëã NovaCore ‡Æ™‡Æ≤‡Øç‡Æï‡Æ≤‡Øà‡Æï‡Øç‡Æï‡Æ¥‡Æï‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡Æµ‡Æ∞‡Æµ‡Øá‡Æ±‡Øç‡Æï‡Æø‡Æ±‡Øã‡ÆÆ‡Øç! ‡Æ®‡Ææ‡Æ©‡Øç Nexora, ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æµ‡Æ≥‡Ææ‡Æï ‡Æâ‡Æ§‡Æµ‡Æø‡ÆØ‡Ææ‡Æ≥‡Æ∞‡Øç. ‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç? ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡ØÅ, ‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡Æï‡Æ≥‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æ§‡ØÅ, ‡Æ™‡Øá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æµ‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æµ‡Æ≥‡Ææ‡Æï ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç.",
    mood_tired: "‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æö‡Øã‡Æ∞‡Øç‡Æµ‡Ææ‡Æï ‡Æá‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æ§‡Øà ‡Æ®‡Ææ‡Æ©‡Øç ‡Æ™‡ØÅ‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Øä‡Æ≥‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç! üò¥ ‡Æµ‡Æ≥‡Ææ‡Æï‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æì‡ÆØ‡Øç‡Æµ‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï ‡ÆÖ‡ÆÆ‡Øà‡Æ§‡Æø‡ÆØ‡Ææ‡Æ© ‡Æá‡Æü‡Æ§‡Øç‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡ÆØ‡Æø‡Æ≤‡Øç ‡Æµ‡Æ∞‡Æµ‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æü‡Øà‡Æµ‡Øá‡Æ≥‡Øà‡Æï‡Æ≥‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡ÆÖ‡ÆÆ‡Øà‡Æ§‡Æø‡ÆØ‡Ææ‡Æ© ‡Æ™‡Æü‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÖ‡ÆÆ‡Æ∞‡Øç‡Æµ‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ®‡ØÇ‡Æ≤‡Æï‡Æ§‡Øç‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Ææ, ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æá‡Æ≤‡Æµ‡Æö ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç ‡Æé‡Æ™‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Ææ?",
    mood_hungry: "‡Æ™‡Æö‡Æø‡ÆØ‡Ææ ‡Æá‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡Æø‡Æ±‡Æ§‡Ææ? üçï ‡Æµ‡Æ≥‡Ææ‡Æï‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æâ‡Æ£‡Æµ‡ØÅ ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç! ‡Æï‡Ææ‡ÆÉ‡Æ™‡Æø ‡Æ™‡ØÜ‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡Ææ‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æö‡Æø‡Æ±‡Æ®‡Øç‡Æ§ ‡Æµ‡Æø‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡ÆÆ‡Ææ‡Æï‡ØÅ‡ÆÆ‡Øç, ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡ÆÖ‡Æ∞‡ØÅ‡Æï‡Æø‡Æ≤‡ØÅ‡Æ≥‡Øç‡Æ≥ ‡ÆÆ‡Æ±‡Øç‡Æ± ‡Æâ‡Æ£‡Æµ‡ØÅ ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æö‡Øä‡Æ≤‡Øç‡Æ≤ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡Æï‡Ææ‡ÆÉ‡Æ™‡Æø ‡Æé‡Æô‡Øç‡Æï‡Øá ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡ØÅ ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Ææ, ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æâ‡Æ£‡Æµ‡ØÅ ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡Ææ‡Æ© ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡Æè‡Æ§‡Ææ‡Æµ‡Æ§‡ØÅ ‡Æâ‡Æ≥‡Øç‡Æ≥‡Æ§‡Ææ ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Ææ?",
    mood_bored: "‡Æö‡Æ≤‡Æø‡Æ™‡Øç‡Æ™‡Ææ? üòä ‡Æè‡Æ§‡Ææ‡Æµ‡Æ§‡ØÅ ‡Æö‡ØÅ‡Æµ‡Ææ‡Æ∞‡Æ∏‡Øç‡ÆØ‡ÆÆ‡Ææ‡Æ© ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç! ‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æµ‡Æ≥‡Ææ‡Æï‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æé‡Æ©‡Øç‡Æ© ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡Æ®‡Æü‡Æï‡Øç‡Æï‡Æø‡Æ±‡Æ§‡ØÅ ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç, ‡Æµ‡ØÜ‡Æµ‡Øç‡Æµ‡Øá‡Æ±‡ØÅ ‡Æµ‡Æö‡Æ§‡Æø‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç, ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æ™‡ØÅ‡Æ§‡Æø‡ÆØ ‡Æ™‡Æï‡ØÅ‡Æ§‡Æø‡Æï‡Æ≥‡Øà ‡ÆÜ‡Æ∞‡Ææ‡ÆØ ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡Æµ‡Æ∞‡Æµ‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà‡Æ™‡Øç ‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Ææ, ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æö‡Æø‡Æ≤ ‡Æö‡ØÅ‡Æµ‡Ææ‡Æ∞‡Æ∏‡Øç‡ÆØ‡ÆÆ‡Ææ‡Æ© ‡Æµ‡Æ≥‡Ææ‡Æï ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Æø‡Æ©‡Øç ‡ÆÆ‡ØÜ‡ÆØ‡Øç‡Æ®‡Æø‡Æï‡Æ∞‡Øç ‡Æö‡ØÅ‡Æ±‡Øç‡Æ±‡ØÅ‡Æ™‡Øç‡Æ™‡ÆØ‡Æ£‡Æ§‡Øç‡Æ§‡Øà ‡Æµ‡Æ¥‡Æô‡Øç‡Æï‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Ææ?",
    mood_stressed: "‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ© ‡ÆÖ‡Æ¥‡ØÅ‡Æ§‡Øç‡Æ§‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æá‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æ§‡Æ±‡Øç‡Æï‡ØÅ ‡Æµ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç! üòå ‡Æì‡ÆØ‡Øç‡Æµ‡ØÜ‡Æü‡ØÅ‡Æï‡Øç‡Æï ‡Æö‡Æø‡Æ≤ ‡Æµ‡Æ¥‡Æø‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡ÆÖ‡ÆÆ‡Øà‡Æ§‡Æø‡ÆØ‡Ææ‡Æ© ‡Æ™‡Æü‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ™‡Æï‡ØÅ‡Æ§‡Æø‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç, ‡Æ®‡Æ≤‡Øç‡Æµ‡Ææ‡Æ¥‡Øç‡Æµ‡ØÅ ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡Æè‡Æ§‡Ææ‡Æµ‡Æ§‡ØÅ ‡Æ®‡Æü‡Æï‡Øç‡Æï‡Æø‡Æ±‡Æ§‡Ææ ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç, ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æµ‡Æ≥‡Ææ‡Æï‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡ÆÖ‡ÆÆ‡Øà‡Æ§‡Æø‡ÆØ‡Ææ‡Æ© ‡Æá‡Æü‡Æ§‡Øç‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡ÆÖ‡ÆÆ‡Øà‡Æ§‡Æø‡ÆØ‡Ææ‡Æ© ‡Æ®‡Øá‡Æ∞‡Æ§‡Øç‡Æ§‡Æø‡Æ±‡Øç‡Æï‡ØÅ ‡Æ®‡ØÇ‡Æ≤‡Æï‡Æ§‡Øç‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Ææ, ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡ÆÆ‡Æ© ‡ÆÖ‡Æ¥‡ØÅ‡Æ§‡Øç‡Æ§ ‡Æ®‡Æø‡Æµ‡Ææ‡Æ∞‡Æ£ ‡Æ®‡Æü‡Æµ‡Æü‡Æø‡Æï‡Øç‡Æï‡Øà‡Æï‡Æ≥‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Ææ?",
    mood_sad: "‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ©‡ÆÆ‡Øç ‡Æµ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æµ‡Æ§‡Æ±‡Øç‡Æï‡ØÅ ‡Æµ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. üòî ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡ÆÆ‡Æï‡Æø‡Æ¥‡Øç‡Æµ‡Æø‡Æï‡Øç‡Æï ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç! ‡Æµ‡Æ≥‡Ææ‡Æï‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æö‡Æø‡Æ≤ ‡ÆÖ‡Æ¥‡Æï‡Ææ‡Æ© ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç, ‡Æµ‡Øá‡Æü‡Æø‡Æï‡Øç‡Æï‡Øà‡ÆØ‡Ææ‡Æ© ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡Æè‡Æ§‡Ææ‡Æµ‡Æ§‡ØÅ ‡Æ®‡Æü‡Æï‡Øç‡Æï‡Æø‡Æ±‡Æ§‡Ææ ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç, ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æ®‡Æü‡Øà‡Æ™‡ÆØ‡Æø‡Æ±‡Øç‡Æö‡Æø ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ ‡Æ®‡Æ≤‡Øç‡Æ≤ ‡Æá‡Æü‡Æ§‡Øç‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æâ‡Æ§‡Æµ‡ØÅ‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡Æö‡Æø‡Æ≤ ‡Æµ‡Æ≥‡Ææ‡Æï ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡ÆÜ‡Æ∞‡Ææ‡ÆØ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Ææ, ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æµ‡Æ∞‡Æµ‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æö‡ÆÆ‡ØÇ‡Æï ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æï‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Ææ?",
    mood_happy: "‡ÆÖ‡Æ§‡ØÅ ‡ÆÖ‡Æ∞‡ØÅ‡ÆÆ‡Øà! üòä ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ®‡Æ≤‡Øç‡Æ≤ ‡ÆÆ‡Æ©‡Æ®‡Æø‡Æ≤‡Øà‡ÆØ‡Æø‡Æ≤‡Øç ‡Æá‡Æ∞‡ØÅ‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡ÆÆ‡Æï‡Æø‡Æ¥‡Øç‡Æö‡Øç‡Æö‡Æø! ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ®‡Ææ‡Æ≥‡Øà ‡Æá‡Æ©‡Øç‡Æ©‡ØÅ‡ÆÆ‡Øç ‡Æö‡Æø‡Æ±‡Æ™‡Øç‡Æ™‡Ææ‡Æï‡Øç‡Æï ‡Æ®‡Ææ‡Æ©‡Øç ‡Æé‡Æ™‡Øç‡Æ™‡Æü‡Æø ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç? ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡ØÅ, ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡Æï‡Æ≥‡Øà ‡Æö‡Æ∞‡Æø‡Æ™‡Ææ‡Æ∞‡Øç‡Æ™‡Øç‡Æ™‡Æ§‡ØÅ, ‡ÆÖ‡Æ≤‡Øç‡Æ≤‡Æ§‡ØÅ ‡Æµ‡Æ≥‡Ææ‡Æï‡Æ§‡Øç‡Æ§‡Øà‡Æö‡Øç ‡Æö‡ØÅ‡Æ±‡Øç‡Æ±‡Æø‡Æï‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æµ‡Æ§‡ØÅ ‡Æ™‡Æ±‡Øç‡Æ±‡Æø ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ©‡Øç‡Æ© ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?",
    location_help: "‡Æµ‡Æ≥‡Ææ‡Æï‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç! ‡Æá‡Æ§‡Øà‡Æï‡Øç ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç:\n\n‚Ä¢ IT ‡Æ™‡ØÄ‡Æü‡ÆÆ‡Øç\n‚Ä¢ ‡Æ™‡Øä‡Æ±‡Æø‡ÆØ‡Æø‡ÆØ‡Æ≤‡Øç ‡Æ™‡ØÄ‡Æü‡ÆÆ‡Øç\n‚Ä¢ ‡Æï‡Æü‡Øç‡Æü‡Æø‡Æü‡Æï‡Øç‡Æï‡Æ≤‡Øà ‡Æ™‡ØÄ‡Æü‡ÆÆ‡Øç\n‚Ä¢ ‡Æ®‡ØÇ‡Æ≤‡Æï‡ÆÆ‡Øç\n‚Ä¢ ‡Æâ‡Æ£‡Æµ‡Æï‡ÆÆ‡Øç\n‚Ä¢ ‡ÆÆ‡ØÅ‡Æ§‡Æ©‡Øç‡ÆÆ‡Øà ‡Æï‡Æü‡Øç‡Æü‡Æø‡Æü‡ÆÆ‡Øç\n\n'[‡Æá‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ©‡Øç ‡Æ™‡ØÜ‡ÆØ‡Æ∞‡Øç] ‡Æé‡Æô‡Øç‡Æï‡Øá?' ‡Æé‡Æ©‡Øç‡Æ±‡ØÅ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æ®‡Ææ‡Æ©‡Øç ‡ÆÖ‡Æ§‡Øà ‡Æµ‡Æ∞‡Øà‡Æ™‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü‡ØÅ‡Æµ‡Øá‡Æ©‡Øç!",
    student_only: "‡ÆÆ‡Ææ‡Æ£‡Æµ‡Æ∞‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡ÆÆ‡Æü‡Øç‡Æü‡ØÅ‡ÆÆ‡Øá ‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Ææ‡Æü‡Øç‡Æü ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡ÆÆ‡Øá‡Æ≤‡ØÅ‡ÆÆ‡Øç ‡Æ§‡Æï‡Æµ‡Æ≤‡ØÅ‡Æï‡Øç‡Æï‡ØÅ ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø‡ÆØ‡Øà ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡Æµ‡ØÅ‡ÆÆ‡Øç.",
    degree_not_set: "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æü‡Øç‡Æü‡Æ™‡Øç‡Æ™‡Æü‡Æø‡Æ™‡Øç‡Æ™‡ØÅ ‡Æ§‡Æï‡Æµ‡Æ≤‡Øç ‡ÆÖ‡ÆÆ‡Øà‡Æï‡Øç‡Æï‡Æ™‡Øç‡Æ™‡Æü‡Æµ‡Æø‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ™‡Æü‡Øç‡Æü‡Æ™‡Øç‡Æ™‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Øà ‡ÆÖ‡ÆÆ‡Øà‡Æï‡Øç‡Æï ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø‡ÆØ‡Øà ‡Æ§‡Øä‡Æü‡Æ∞‡Øç‡Æ™‡ØÅ ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥‡Æµ‡ØÅ‡ÆÆ‡Øç.",
    no_schedules_today: "‡Æá‡Æ©‡Øç‡Æ±‡ØÅ {degree} ‡Æ™‡Æü‡Øç‡Æü‡Æ™‡Øç‡Æ™‡Æü‡Æø‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Øç‡Æï‡Ææ‡Æ© ‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà.",
    no_more_classes: "‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡ØÅ‡Æï‡Øç‡Æï‡ØÅ {degree} ‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà.",
    remaining_classes: "‡Æá‡Æ©‡Øç‡Æ±‡ØÅ ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÆ‡ØÄ‡Æ§‡ÆÆ‡ØÅ‡Æ≥‡Øç‡Æ≥ {degree} ‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ‡Æï‡Æ≥‡Øç ‡Æá‡Æ§‡Øã:\n\n",
    no_bus_routes: "‡Æö‡Æø‡Æ∏‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æ™‡Øá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æµ‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø‡ÆØ‡Æø‡Æü‡ÆÆ‡Øç ‡Æµ‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Ææ‡Æ±‡ØÅ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.",
    available_routes: "‡Æï‡Æø‡Æü‡Øà‡Æï‡Øç‡Æï‡Æï‡Øç‡Æï‡ØÇ‡Æü‡Æø‡ÆØ ‡Æ™‡Øá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æµ‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æá‡Æ§‡Øã:\n\n",
    no_events: "‡Æö‡Æø‡Æ∏‡Øç‡Æü‡Æ§‡Øç‡Æ§‡Æø‡Æ≤‡Øç ‡Æµ‡Æ∞‡Æµ‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æ≤‡Øç‡Æ≤‡Øà. ‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡Æø‡ÆØ‡Æø‡Æü‡ÆÆ‡Øç ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà ‡Æö‡Øá‡Æ∞‡Øç‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Ææ‡Æ±‡ØÅ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø ‡Æï‡Øá‡Æ≥‡ØÅ‡Æô‡Øç‡Æï‡Æ≥‡Øç.",
    upcoming_events: "‡Æµ‡Æ∞‡Æµ‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡Æá‡Æ§‡Øã:\n\n",
    error_fetching_schedule: "‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡ÆØ‡Øà ‡Æ™‡ØÜ‡Æ±‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æ™‡Æø‡Æ¥‡Øà ‡Æè‡Æ±‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.",
    error_fetching_bus: "‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æ™‡Øá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æµ‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà ‡Æ™‡ØÜ‡Æ±‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æ™‡Æø‡Æ¥‡Øà ‡Æè‡Æ±‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.",
    error_fetching_events: "‡ÆÆ‡Æ©‡Øç‡Æ©‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç, ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øà ‡Æ™‡ØÜ‡Æ±‡ØÅ‡ÆÆ‡Øç‡Æ™‡Øã‡Æ§‡ØÅ ‡Æ™‡Æø‡Æ¥‡Øà ‡Æè‡Æ±‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡ÆÆ‡ØÄ‡Æ£‡Øç‡Æü‡ØÅ‡ÆÆ‡Øç ‡ÆÆ‡ØÅ‡ÆØ‡Æ±‡Øç‡Æö‡Æø‡Æï‡Øç‡Æï‡Æµ‡ØÅ‡ÆÆ‡Øç.",
    fallback_response: "‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æè‡Æ§‡Ææ‡Æµ‡Æ§‡ØÅ ‡Æï‡Øá‡Æ≥‡Øç‡Æµ‡Æø ‡Æï‡Øá‡Æü‡Øç‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ©‡Øç‡Æ™‡Æ§‡Øà ‡Æ®‡Ææ‡Æ©‡Øç ‡Æ™‡ØÅ‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Øä‡Æ≥‡Øç‡Æï‡Æø‡Æ±‡Øá‡Æ©‡Øç. ‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ ‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà‡Æï‡Æ≥‡Øç, ‡Æ™‡Øá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ ‡Æµ‡Æ¥‡Æø‡Æ§‡Øç‡Æ§‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øç, ‡Æµ‡Æ≥‡Ææ‡Æï ‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ‡Æï‡Æ≥‡Øç ‡ÆÆ‡Æ±‡Øç‡Æ±‡ØÅ‡ÆÆ‡Øç ‡Æá‡Æü‡Æô‡Øç‡Æï‡Æ≥‡Øà‡Æï‡Øç ‡Æï‡Æ£‡Øç‡Æü‡ØÅ‡Æ™‡Æø‡Æü‡Æø‡Æ™‡Øç‡Æ™‡Æ§‡Æø‡Æ≤‡Øç ‡Æ®‡Ææ‡Æ©‡Øç ‡Æâ‡Æ§‡Æµ ‡ÆÆ‡ØÅ‡Æü‡Æø‡ÆØ‡ØÅ‡ÆÆ‡Øç. ‡Æ®‡ØÄ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æé‡Æ©‡Øç‡Æ© ‡Æ§‡ØÜ‡Æ∞‡Æø‡Æ®‡Øç‡Æ§‡ØÅ‡Æï‡Øä‡Æ≥‡Øç‡Æ≥ ‡Æµ‡Æø‡Æ∞‡ØÅ‡ÆÆ‡Øç‡Æ™‡ØÅ‡Æï‡Æø‡Æ±‡ØÄ‡Æ∞‡Øç‡Æï‡Æ≥‡Øç?"
  }
};

// Helper function to get translation
const getTranslation = (key: keyof TranslationKeys, language: string, params?: Record<string, string>): string => {
  const lang = language as 'en' | 'si' | 'ta';
  const translation = translations[lang]?.[key] || translations.en[key] || String(key);
  
  if (params) {
    return Object.entries(params).reduce((text, [param, value]) => {
      return text.replace(new RegExp(`{${param}}`, 'g'), value);
    }, translation);
  }
  
  return translation;
};

// Helper function to detect language from message
const detectLanguage = (message: string): string => {
  const lowerMessage = message.toLowerCase();
  
  // Check for Sinhala characters (Unicode range: U+0D80 to U+0DFF)
  if (/[\u0D80-\u0DFF]/.test(message)) {
    return 'si';
  }
  
  // Check for Tamil characters (Unicode range: U+0B80 to U+0BFF)
  if (/[\u0B80-\u0BFF]/.test(message)) {
    return 'ta';
  }
  
  // Check for Tamil keywords in English script
  const tamilKeywords = ['vakuppu', 'class', 'schedule', 'bus', 'event', 'location', 'where', 'when', 'what'];
  if (tamilKeywords.some(keyword => lowerMessage.includes(keyword))) {
    // If the message contains Tamil characters, prioritize Tamil
    if (/[\u0B80-\u0BFF]/.test(message)) {
      return 'ta';
    }
  }
  
  // Check for Sinhala keywords in English script
  const sinhalaKeywords = ['panti', 'kala', 'bas', 'kama', 'sithiyama', 'kohada'];
  if (sinhalaKeywords.some(keyword => lowerMessage.includes(keyword))) {
    // If the message contains Sinhala characters, prioritize Sinhala
    if (/[\u0D80-\u0DFF]/.test(message)) {
      return 'si';
    }
  }
  
  return 'en';
};

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

// System prompt for the chatbot
const SYSTEM_PROMPT = `You are Nexora, a helpful campus assistant for NovaCore University. 
Your role is to assist students, staff, and visitors with campus-related queries.
You can help with:
- Finding locations on campus
- Providing information about facilities
- Answering questions about university services
- Giving directions
- Sharing campus news and events
Always be polite, professional, and accurate in your responses.`;

// Simple sentiment analysis function
const analyzeSentiment = (text: string): number => {
  const lowerText = text.toLowerCase();
  
  // Positive words
  const positiveWords = ['good', 'great', 'excellent', 'amazing', 'wonderful', 'perfect', 'love', 'like', 'happy', 'thanks', 'thank you', 'helpful', 'nice', 'awesome', 'fantastic', 'brilliant', 'super', 'cool', 'yes', 'okay', 'ok', 'sure', 'fine', 'well', 'better', 'best'];
  
  // Negative words
  const negativeWords = ['bad', 'terrible', 'awful', 'horrible', 'hate', 'dislike', 'wrong', 'error', 'problem', 'issue', 'broken', 'failed', 'no', 'not', 'never', 'worst', 'worse', 'sad', 'angry', 'frustrated', 'annoyed', 'upset', 'disappointed'];
  
  let score = 0;
  
  // Count positive words
  positiveWords.forEach(word => {
    const regex = new RegExp(`\\b${word}\\b`, 'g');
    const matches = lowerText.match(regex);
    if (matches) {
      score += matches.length;
    }
  });
  
  // Count negative words
  negativeWords.forEach(word => {
    const regex = new RegExp(`\\b${word}\\b`, 'g');
    const matches = lowerText.match(regex);
    if (matches) {
      score -= matches.length;
    }
  });
  
  // Normalize score to range [-1, 1]
  const totalWords = text.split(' ').length;
  if (totalWords === 0) return 0;
  
  const normalizedScore = Math.max(-1, Math.min(1, score / Math.max(totalWords / 10, 1)));
  return normalizedScore;
};

export const chat = catchAsync(async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  try {
    const { message, language: userLanguage } = req.body;
    if (!message) {
      return next(new AppError('Message is required', 400));
    }

    if (!req.user?.id) {
      return next(new AppError('User not authenticated', 401));
    }

    // Detect language from message or use user preference
    const detectedLanguage = userLanguage || detectLanguage(message);
    const lowerMessage = message.toLowerCase();
    logger.info('Received chat message:', { message, user: req.user, language: detectedLanguage });

    let botResponse = '';

    // Check for greetings first
    if (lowerMessage.includes('hi') || lowerMessage.includes('hello') || lowerMessage.includes('hey') ||
        lowerMessage.includes('good morning') || lowerMessage.includes('good afternoon') || lowerMessage.includes('good evening') ||
        lowerMessage.includes('‡Æµ‡Æ£‡Æï‡Øç‡Æï‡ÆÆ‡Øç') || lowerMessage.includes('‡Æπ‡Æ≤‡Øã') || lowerMessage.includes('‡Æπ‡Ææ‡ÆØ‡Øç') ||
        lowerMessage.includes('‡∂Ü‡∂∫‡∑î‡∂∂‡∑ù‡∑Ä‡∂±‡∑ä') || lowerMessage.includes('‡∑Ñ‡∑ô‡∂Ω‡∑ù') || lowerMessage.includes('‡∑Ñ‡∑è‡∂∫‡∑í')) {
      
      console.log('Greeting detection triggered for message:', lowerMessage);
      botResponse = getTranslation('greeting_response', detectedLanguage);
    }
    // Check for mood-based responses
    else if (lowerMessage.includes('tired') || lowerMessage.includes('exhausted') || lowerMessage.includes('sleepy') ||
             lowerMessage.includes('‡Æö‡Øã‡Æ∞‡Øç‡Æµ‡ØÅ') || lowerMessage.includes('‡ÆÖ‡Æ≤‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ') || lowerMessage.includes('‡Æ§‡ØÇ‡Æï‡Øç‡Æï‡ÆÆ‡Øç')) {
      
      console.log('Tired mood detection triggered for message:', lowerMessage);
      botResponse = getTranslation('mood_tired', detectedLanguage);
    }
    else if (lowerMessage.includes('hungry') || lowerMessage.includes('starving') || lowerMessage.includes('food') ||
             lowerMessage.includes('‡Æ™‡Æö‡Æø') || lowerMessage.includes('‡Æâ‡Æ£‡Æµ‡ØÅ') || lowerMessage.includes('‡Æï‡Ææ‡ÆÉ‡Æ™‡Æø') ||
             lowerMessage.includes('‡∂∂‡∂©‡∂ú‡∑í‡∂±‡∑í') || lowerMessage.includes('‡∂ö‡∑ë‡∂∏')) {
      
      console.log('Hungry mood detection triggered for message:', lowerMessage);
      botResponse = getTranslation('mood_hungry', detectedLanguage);
    }
    else if (lowerMessage.includes('bored') || lowerMessage.includes('boring') || lowerMessage.includes('nothing to do') ||
             lowerMessage.includes('‡Æö‡Æ≤‡Æø‡Æ™‡Øç‡Æ™‡ØÅ') || lowerMessage.includes('‡Æ™‡Øã‡Æ∞‡Æü‡Æø‡Æ™‡Øç‡Æ™‡ØÅ') || lowerMessage.includes('‡Æé‡Æ§‡ØÅ‡Æµ‡ØÅ‡ÆÆ‡Øç ‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ') ||
             lowerMessage.includes('‡∂∂‡∑ú‡∂ª‡∑î') || lowerMessage.includes('‡∂ö‡∑í‡∑É‡∑í‡∑Ä‡∂ö‡∑ä ‡∂±‡∑ê‡∂≠')) {
      
      console.log('Bored mood detection triggered for message:', lowerMessage);
      botResponse = getTranslation('mood_bored', detectedLanguage);
    }
    else if (lowerMessage.includes('stressed') || lowerMessage.includes('stress') || lowerMessage.includes('anxious') ||
             lowerMessage.includes('‡ÆÆ‡Æ© ‡ÆÖ‡Æ¥‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç') || lowerMessage.includes('‡Æ™‡Æ§‡Æü‡Øç‡Æü‡ÆÆ‡Øç') || lowerMessage.includes('‡Æï‡Æµ‡Æ≤‡Øà') ||
             lowerMessage.includes('‡∂Ü‡∂≠‡∂≠‡∑í‡∂∫') || lowerMessage.includes('‡∂¥‡∑ì‡∂©‡∂±‡∂∫')) {
      
      console.log('Stressed mood detection triggered for message:', lowerMessage);
      botResponse = getTranslation('mood_stressed', detectedLanguage);
    }
    else if (lowerMessage.includes('sad') || lowerMessage.includes('depressed') || lowerMessage.includes('unhappy') ||
             lowerMessage.includes('‡Æµ‡Æ∞‡ØÅ‡Æ§‡Øç‡Æ§‡ÆÆ‡Øç') || lowerMessage.includes('‡ÆÆ‡Æ©‡ÆÆ‡Øç ‡Æµ‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§') || lowerMessage.includes('‡Æö‡Øã‡Æï‡ÆÆ‡Øç') ||
             lowerMessage.includes('‡∂Ø‡∑î‡∂ö‡∑ä') || lowerMessage.includes('‡∑É‡∂Ç‡∑Ä‡∑ö‡∂ú')) {
      
      console.log('Sad mood detection triggered for message:', lowerMessage);
      botResponse = getTranslation('mood_sad', detectedLanguage);
    }
    else if (lowerMessage.includes('happy') || lowerMessage.includes('excited') || lowerMessage.includes('great') ||
             lowerMessage.includes('‡ÆÆ‡Æï‡Æø‡Æ¥‡Øç‡Æö‡Øç‡Æö‡Æø') || lowerMessage.includes('‡Æö‡Æ®‡Øç‡Æ§‡Øã‡Æ∑‡ÆÆ‡Øç') || lowerMessage.includes('‡Æ®‡Æ©‡Øç‡Æ±‡Ææ‡Æï') ||
             lowerMessage.includes('‡∑É‡∂≠‡∑î‡∂ß‡∑î') || lowerMessage.includes('‡∂ã‡∂Ø‡∑ä‡∑Ä‡∑ö‡∂ú')) {
      
      console.log('Happy mood detection triggered for message:', lowerMessage);
      botResponse = getTranslation('mood_happy', detectedLanguage);
    }
    // Check if the message is about locations/directions
    else if (lowerMessage.includes('where') || lowerMessage.includes('location') || lowerMessage.includes('directions') || 
        lowerMessage.includes('how to get to') || lowerMessage.includes('find') || lowerMessage.includes('map') ||
        lowerMessage.includes('‡Æé‡Æô‡Øç‡Æï‡Øá') || lowerMessage.includes('‡Æá‡Æü‡ÆÆ‡Øç') || lowerMessage.includes('‡Æµ‡Æ¥‡Æø') ||
        lowerMessage.includes('‡∂ö‡∑ú‡∑Ñ‡∑ô‡∂Ø') || lowerMessage.includes('‡∑É‡∑ä‡∂Æ‡∑è‡∂±‡∂∫') || lowerMessage.includes('‡∂∏‡∑è‡∂ª‡∑ä‡∂ú‡∂∫')) {
      
      console.log('Location detection triggered for message:', lowerMessage);
      
      // Define common campus locations
      const campusLocations = [
        { name: 'IT Faculty', keywords: ['it faculty', 'information technology', 'computer science', 'cs faculty', '‡Æê‡Æü‡Æø ‡Æ™‡ØÄ‡Æü‡ÆÆ‡Øç', '‡Æï‡Æ£‡Æø‡Æ©‡Æø ‡ÆÖ‡Æ±‡Æø‡Æµ‡Æø‡ÆØ‡Æ≤‡Øç', 'IT ‡∂¥‡∑ì‡∂®‡∂∫'] },
        { name: 'Engineering Faculty', keywords: ['engineering faculty', 'engineering', 'eng faculty', '‡Æ™‡Øä‡Æ±‡Æø‡ÆØ‡Æø‡ÆØ‡Æ≤‡Øç ‡Æ™‡ØÄ‡Æü‡ÆÆ‡Øç', '‡Æ™‡Øä‡Æ±‡Æø‡ÆØ‡Æø‡ÆØ‡Æ≤‡Øç', '‡∂â‡∂Ç‡∂¢‡∑í‡∂±‡∑ö‡∂ª‡∑î ‡∂¥‡∑ì‡∂®‡∂∫'] },
        { name: 'Architecture Faculty', keywords: ['architecture faculty', 'architecture', 'arch faculty', '‡Æï‡Æü‡Øç‡Æü‡Æø‡Æü‡Æï‡Øç‡Æï‡Æ≤‡Øà ‡Æ™‡ØÄ‡Æü‡ÆÆ‡Øç', '‡Æï‡Æü‡Øç‡Æü‡Æø‡Æü‡Æï‡Øç‡Æï‡Æ≤‡Øà', '‡∂ú‡∑ò‡∑Ñ‡∂±‡∑í‡∂ª‡∑ä‡∂∏‡∑è‡∂´ ‡∂¥‡∑ì‡∂®‡∂∫'] },
        { name: 'Library', keywords: ['library', 'lib', 'study', 'books', '‡Æ®‡ØÇ‡Æ≤‡Æï‡ÆÆ‡Øç', '‡Æ™‡ØÅ‡Æ§‡Øç‡Æ§‡Æï‡Æô‡Øç‡Æï‡Æ≥‡Øç', '‡∂¥‡∑î‡∑É‡∑ä‡∂≠‡∂ö‡∑è‡∂Ω‡∂∫'] },
        { name: 'Cafeteria', keywords: ['cafeteria', 'canteen', 'food', 'lunch', 'dining', 'restaurant', '‡Æâ‡Æ£‡Æµ‡Æï‡ÆÆ‡Øç', '‡Æâ‡Æ£‡Æµ‡ØÅ', '‡Æï‡Ææ‡ÆÉ‡Æ™‡Æø', '‡∂ö‡∑ë‡∂∏‡∑ù‡∂ß‡∑î‡∑Ä'] },
        { name: 'Main Building', keywords: ['main building', 'main', 'administration', 'admin', 'office', '‡ÆÆ‡ØÅ‡Æ§‡Æ©‡Øç‡ÆÆ‡Øà ‡Æï‡Æü‡Øç‡Æü‡Æø‡Æü‡ÆÆ‡Øç', '‡Æ®‡Æø‡Æ∞‡Øç‡Æµ‡Ææ‡Æï‡ÆÆ‡Øç', '‡∂¥‡∑ä‚Äç‡∂ª‡∂∞‡∑è‡∂± ‡∂ú‡∑ú‡∂©‡∂±‡∑ê‡∂ú‡∑í‡∂Ω‡∑ä‡∂Ω'] }
      ];

      // Find matching location
      let foundLocation = null;
      for (const location of campusLocations) {
        console.log('Checking location:', location.name, 'with keywords:', location.keywords);
        if (location.keywords.some(keyword => lowerMessage.includes(keyword))) {
          foundLocation = location;
          console.log('Found matching location:', foundLocation.name);
          break;
        }
      }

      if (foundLocation) {
        const encodedLocation = encodeURIComponent(foundLocation.name);
        botResponse = `LOCATION_REDIRECT:${foundLocation.name}:${encodedLocation}`;
        console.log('Generated location redirect response:', botResponse);
      } else {
        console.log('No location found for message:', lowerMessage);
        botResponse = getTranslation('location_help', detectedLanguage);
      }
    }
    // Check if the message is about class schedules
    else if (lowerMessage.includes('class') || lowerMessage.includes('schedule') || 
             lowerMessage.includes('‡Æµ‡Æï‡ØÅ‡Æ™‡Øç‡Æ™‡ØÅ') || lowerMessage.includes('‡ÆÖ‡Æü‡Øç‡Æü‡Æµ‡Æ£‡Øà') || lowerMessage.includes('vakuppu') ||
             lowerMessage.includes('‡∂¥‡∂±‡∑ä‡∂≠‡∑í‡∂∫') || lowerMessage.includes('‡∂ö‡∑è‡∂Ω‡∑É‡∂ß‡∑Ñ‡∂±') || lowerMessage.includes('panti')) {
      try {
        console.log('Chat request user ID:', req.user.id);
        console.log('Chat request user object:', req.user);

        const user = await User.findById(req.user.id);
        if (!user) {
          return next(new AppError('User not found', 404));
        }

        console.log('Found user in database:', { 
          id: user._id, 
          role: user.role, 
          degree: user.degree,
          email: user.email 
        });

        logger.info('User info:', { userId: user._id, role: user.role, degree: user.degree });

        // If user is not a student, return a message
        if (user.role !== 'student') {
          botResponse = getTranslation('student_only', detectedLanguage);
        } else if (!user.degree) {
          console.log('User degree is not set:', user.degree);
          botResponse = getTranslation('degree_not_set', detectedLanguage);
        } else {
          console.log('User degree is set:', user.degree);

          // Get schedules for the user's degree
          const schedules = await Schedule.find({ 
            degree: user.degree,
            day: new Date().toLocaleDateString('en-US', { weekday: 'long' })
          }).sort({ startTime: 1 });

          logger.info('Found schedules:', { 
            count: schedules.length, 
            degree: user.degree,
            schedules: schedules.map(s => ({ className: s.className, degree: s.degree }))
          });
          
          if (schedules.length === 0) {
            botResponse = getTranslation('no_schedules_today', detectedLanguage, { degree: user.degree });
          } else {
            // Get current time
            const currentTime = new Date().toLocaleTimeString('en-US', { hour12: false });

            // Filter schedules for future times
            const relevantSchedules = schedules.filter(schedule => 
              schedule.startTime >= currentTime
            );

            logger.info('Filtered schedules:', { 
              total: schedules.length, 
              relevant: relevantSchedules.length,
              schedules: relevantSchedules.map(s => ({ 
                className: s.className, 
                day: s.day, 
                startTime: s.startTime,
                degree: s.degree 
              }))
            });

            if (relevantSchedules.length === 0) {
              botResponse = getTranslation('no_more_classes', detectedLanguage, { degree: user.degree });
            } else {
              let formattedResponse = getTranslation('remaining_classes', detectedLanguage, { degree: user.degree });
              
              relevantSchedules.forEach(schedule => {
                formattedResponse += `- ${schedule.startTime} to ${schedule.endTime}: ${schedule.className} (${schedule.location}) with ${schedule.instructor}\n`;
              });

              botResponse = formattedResponse.trim();
            }
          }
        }
      } catch (error) {
        logger.error('Error fetching schedules:', error);
        botResponse = getTranslation('error_fetching_schedule', detectedLanguage);
      }
    }
    // Check if the message is about bus routes
    else if (lowerMessage.includes('bus') || lowerMessage.includes('transport') ||
             lowerMessage.includes('‡Æ™‡Øá‡Æ∞‡ØÅ‡Æ®‡Øç‡Æ§‡ØÅ') || lowerMessage.includes('‡Æ™‡Øã‡Æï‡Øç‡Æï‡ØÅ‡Æµ‡Æ∞‡Æ§‡Øç‡Æ§‡ØÅ') ||
             lowerMessage.includes('‡∂∂‡∑É‡∑ä') || lowerMessage.includes('‡∂¥‡∑ä‚Äç‡∂ª‡∑Ä‡∑è‡∑Ñ‡∂±')) {
      try {
        const busRoutes = await BusRoute.find().sort({ route: 1 });
        
        if (busRoutes.length === 0) {
          botResponse = getTranslation('no_bus_routes', detectedLanguage);
        } else {
          let formattedResponse = getTranslation('available_routes', detectedLanguage);
          
          busRoutes.forEach(route => {
            formattedResponse += `${route.route}:\n`;
            formattedResponse += `Duration: ${route.duration}\n`;
            formattedResponse += `Schedule: ${route.schedule}\n\n`;
          });

          botResponse = formattedResponse.trim();
        }
      } catch (error) {
        logger.error('Error fetching bus routes:', error);
        botResponse = getTranslation('error_fetching_bus', detectedLanguage);
      }
    }
    // Check if the message is about events
    else if (lowerMessage.includes('event') || lowerMessage.includes('upcoming') ||
             lowerMessage.includes('‡Æ®‡Æø‡Æï‡Æ¥‡Øç‡Æµ‡ØÅ') || lowerMessage.includes('‡Æµ‡Æ∞‡Æµ‡Æø‡Æ∞‡ØÅ‡Æï‡Øç‡Æï‡ØÅ‡ÆÆ‡Øç') ||
             lowerMessage.includes('‡∑É‡∑í‡∂Ø‡∑î‡∑Ä‡∑ì‡∂∏') || lowerMessage.includes('‡∂â‡∂Ø‡∑í‡∂ª‡∑í')) {
      try {
        console.log('Fetching events directly from database...');
        
        const events = await Event.find().sort({ date: 1 });
        console.log('Found events in database:', events.length);
        
        if (events.length === 0) {
          console.log('No events found in database');
          botResponse = getTranslation('no_events', detectedLanguage);
        } else {
          // Format events to match the expected structure
          const formattedEvents = events.map(event => ({
            date: event.date,
            name: event.title,
            location: event.location,
            time: event.time
          }));
          
          console.log('Formatted events:', formattedEvents.length);
          let formattedResponse = getTranslation('upcoming_events', detectedLanguage);
          
          formattedEvents.forEach((event: any) => {
            formattedResponse += `${event.name}\n`;
            formattedResponse += `Date: ${new Date(event.date).toLocaleDateString()}\n`;
            formattedResponse += `Time: ${event.time}\n`;
            formattedResponse += `Location: ${event.location}\n\n`;
          });

          botResponse = formattedResponse.trim();
        }
      } catch (error) {
        console.error('Error fetching events from database:', error);
        logger.error('Error fetching events from database:', error);
        botResponse = getTranslation('error_fetching_events', detectedLanguage);
      }
    }
    // For other messages, use enhanced fallback responses (OpenAI disabled)
    else {
      console.log('Using enhanced fallback response system...');
      botResponse = getTranslation('fallback_response', detectedLanguage);
    }

    // Save messages to database
    try {
      let chat = await Chat.findOne({ userId: req.user.id });
      
      if (!chat) {
        chat = new Chat({ userId: req.user.id, messages: [] });
      }

      // Analyze sentiment for user message
      const userSentiment = analyzeSentiment(message);

      // Add user message
      chat.messages.push({
        text: message,
        isUser: true,
        timestamp: new Date(),
        sentiment: userSentiment
      });

      // Add bot response
      chat.messages.push({
        text: botResponse,
        isUser: false,
        timestamp: new Date(),
        sentiment: 0 // Bot responses are neutral
      });

      await chat.save();
      console.log('Chat history saved for user:', req.user.id);
    } catch (error) {
      console.error('Error saving chat history:', error);
      // Don't fail the request if chat history saving fails
    }

    console.log('Sending bot response:', botResponse);
    return res.status(200).json({
      status: 'success',
      data: {
        message: botResponse
      }
    });
  } catch (error) {
    logger.error('Error in chat controller:', error);
    return next(new AppError('An error occurred while processing your request', 500));
  }
});

export const getChatHistory = catchAsync(async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  try {
    if (!req.user?.id) {
      return next(new AppError('User not authenticated', 401));
    }

    const chat = await Chat.findOne({ userId: req.user.id });

    if (!chat) {
      return res.status(200).json({
        status: 'success',
        data: {
          messages: []
        }
      });
    }

    // Format messages for frontend
    const formattedMessages = chat.messages.map(msg => ({
      id: msg._id,
      text: msg.text,
      isUser: msg.isUser,
      timestamp: msg.timestamp,
      sentiment: msg.sentiment
    }));

    res.status(200).json({
      status: 'success',
      data: {
        messages: formattedMessages
      }
    });
  } catch (error) {
    logger.error('Get chat history error:', error);
    return next(new AppError('Error fetching chat history', 500));
  }
});

export const clearChat = catchAsync(async (req: AuthenticatedRequest, res: Response, next: NextFunction) => {
  try {
    if (!req.user?.id) {
      return next(new AppError('User not authenticated', 401));
    }

    const result = await Chat.findOneAndUpdate(
      { userId: req.user.id },
      { $set: { messages: [] } },
      { new: true, upsert: true }
    );

    res.status(200).json({
      status: 'success',
      message: 'Chat history cleared'
    });
  } catch (error) {
    logger.error('Clear chat error:', error);
    return next(new AppError('Error clearing chat history', 500));
  }
}); 